#!/usr/bin/env python
#
# This program allows you to read the AD registers from a uP.
#
# Author: Facundo J. Ferrer <facundo.j.ferrer@gmail.com>
# Date: 5 Dec, 2011
#

# USB related import
import usb.core
import usb.util
import usb.control

# Python imports
import sys

# PIC information
# idVendor=0x04d8
# idProduct=0x7531


if __name__ == "__main__":

    # look for the pic
    sys.stdout.write('Looking for USB uC devices...\n')
    dev = usb.core.find(idVendor=0x04d8, idProduct=0x7531)

    if dev is None:
        raise ValueError('- Device not found!')

    # print found information
    sys.stdout.write('- USB uC device found!\n- Bus 00%s Device 00%s: %s %s\n' %
                     (str(dev.bus), str(dev.address),
                      usb.util.get_string(dev,8,1), usb.util.get_string(dev,15,2)))

    # set the configurations
    sys.stdout.write('- Configuring the device: ')
    dev.set_configuration()
    sys.stdout.write('OK\n')

    # look for an active endpoint
    sys.stdout.write('- Looking for a R/W endpoint: ')
    cfg = dev.get_active_configuration()
    interface_number = cfg[(0,0)].bInterfaceNumber
    alternate_setting = usb.control.get_interface(dev,interface_number)
    intf = usb.util.find_descriptor(cfg, bInterfaceNumber = interface_number,
                                    bAlternateSetting = alternate_setting)
    ep = usb.util.find_descriptor(intf, custom_match = lambda e: \
                                      usb.util.endpoint_direction(e.bEndpointAddress) == \
                                      usb.util.ENDPOINT_OUT)
    assert ep is not None
    sys.stdout.write('OK\n')

    # read/write
    ep = usb.util.find_descriptor(intf, bEndpointAddress=0x2)
    sys.stdout.write('Writing to the OUT endpoint(%s):\n' % ep.bEndpointAddress.__hex__())
    while 1:
        data = '0xff'
        ep.write(data,timeout=2000)
        data = '0x00'
        ep.write(data,timeout=2000)
        data = '0xff'
        ep.write(data,timeout=2000)
        data = '0x00'
        ep.write(data,timeout=2000)

